= Final Project Architecure and Design Software

Authors: Luis Daniel Rivero Sosa A01374527
		 Mario Lagunes Nava		 A01374648
		 Brandon Alain Cruz Ruiz A01375640

Date: 	 May 3, 2018

In this final project we made an adventure game using microservices. We use ... beacuse we know that

The directory structure for the application and its documentation is as follows:

	Microservices/
          		├─ doc/                        				  Folder produced by RDoc.
          		├─ img/                       				  Folder for the documentation’s image files.
          		└─ src/                       				  Folder for the application’s source code.
               		  ├─ map_microservice/               	  Folder for the first microservice.
               		  ├─ monster_microservice/                Folder for the second microservice.
               		  └─ player_microservice/                 Folder for the third microservice.

The +builddocs.sh+ shell script contains the required instructions to produce the RDoc documentation. Run the script from the +Microservices+ directory, typing at the terminal:

    $ bash builddocs.sh                           

The root of the documentation should now be available at: +microservices/doc/index.html+

Use any web browser to see the result.

== Installing and Running the Application

You need to have Ruby 2.3 or more recent and the {Sinatra}[http://www.sinatrarb.com/] and the {Flask}[http:http://flask.pocoo.org/] gem installed in your system to run the _Microservices_ web application.

Open the terminal an type:
	
	$ gem install sinatra

	$ pip install flask

To run the server or the files type the following command at the terminal from the +mocroservices/src+ directory:

If it is a ruby file type:
    $ ruby <FileName>.rb

If it is a python file type:
	$ python <FileName>.py

Afterwards, point your web browser the server’s root URL.

== 4+1 Architectural View Model

=== Logical View



=== Process View


=== Development View


=== Physical View


=== Scenarios

== Patterns Used

We use the following patterns:

- <b>Domain-Specific Language</b>: The +server.rb+ file consists of a series of Sinatra _routes_. Sinatra is a DSL for creating web applications in Ruby.
- <b>Composition </b>: 


== References

- \R. Olsen. <em>Design Patterns in Ruby.</em> Addison-Wesley, 2007. Available through {Safari Books Online}[http://proquestcombo.safaribooksonline.com/book/web-development/ruby/9780321490452].
- From “Code example of using REST in Ruby on Rails” by LEEjava https://leejava.wordpress.com/2009/04/10/code-example-to-use-rest-in-ruby-on-rails/
-Ph. Kruchten. The 4+1 View Model of Architecture. IEEE Software, vol. 12 (6), pp. 45-50, 1995. http://www.ics.uci.edu/~andre/ics223w2006/kruchten3.pdf Accessed November 3, 2017.